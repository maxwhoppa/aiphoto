
# Local development environment with PostgreSQL and Redis
# 
# To use with real AWS services:
# 1. Copy .env.example to .env
# 2. Fill in your actual AWS credentials and service URLs
# 3. Run: docker-compose up
#
# The app will use local PostgreSQL/Redis but connect to real AWS services
# (S3, Cognito, Gemini) for full functionality

services:
  app:
    build: .
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - PORT=3000
      - DATABASE_URL=postgresql://postgres:postgres@db:5432/aiphoto
      - REDIS_URL=redis://redis:6379
      - AWS_REGION=us-east-1
      - COGNITO_REGION=us-east-1
      - CORS_ORIGIN=http://localhost:3000,http://localhost:19006,http://localhost:8081
      # AWS Credentials (set these in .env or override)
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID:-}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY:-}
      - S3_BUCKET_NAME=${S3_BUCKET_NAME:-aiphoto-images-dev}
      - SQS_QUEUE_URL=${SQS_QUEUE_URL:-}
      # Cognito (use your actual values)
      - COGNITO_USER_POOL_ID=${COGNITO_USER_POOL_ID:-us-east-1_1InbbFMy2}
      # Google Gemini API Key (required)
      - GOOGLE_GEMINI_API_KEY=${GOOGLE_GEMINI_API_KEY}
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./logs:/app/logs
    restart: unless-stopped

  db:
    image: postgres:13
    environment:
      POSTGRES_DB: aiphoto
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5


volumes:
  postgres_data:
  redis_data: