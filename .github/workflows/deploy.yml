name: Deploy AI Photo Server

on:
  push:
    branches: [ main, production ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '22'
  AWS_REGION: 'us-east-1'

jobs:
  build:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/production'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        working-directory: ./server
        run: npm install

      - name: Run type checking (optional)
        working-directory: ./server
        run: npm run typecheck || echo "Type checking failed, continuing anyway"
        continue-on-error: true

      - name: Run linting (optional)
        working-directory: ./server
        run: npm run lint || echo "Linting failed, continuing anyway"
        continue-on-error: true

      - name: Build application
        working-directory: ./server
        run: npm run build

      - name: Create deployment package
        working-directory: ./server
        run: |
          # Create deployment package with all necessary files
          mkdir -p deployment-package
          
          # Copy built application
          cp -r dist deployment-package/
          cp package.json package-lock.json deployment-package/
          cp -r drizzle deployment-package/
          
          # Copy CodeDeploy files
          cp appspec.yml deployment-package/
          cp -r scripts deployment-package/
          
          # Create tar file
          cd deployment-package
          tar -czf ../deployment-package.tar.gz .
          cd ..
          
          # Also create ZIP for CodeDeploy
          cd deployment-package
          zip -r ../deployment-package.zip .

      - name: Upload deployment package
        uses: actions/upload-artifact@v4
        with:
          name: deployment-package
          path: |
            server/deployment-package.tar.gz
            server/deployment-package.zip
          retention-days: 30

  deploy-production:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/production'
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Create Key Pair if needed
        run: |
          # Create EC2 key pair if it doesn't exist
          if ! aws ec2 describe-key-pairs --key-names aiphoto-production >/dev/null 2>&1; then
            echo "Creating EC2 key pair..."
            aws ec2 create-key-pair --key-name aiphoto-production --query 'KeyMaterial' --output text > /tmp/aiphoto-production.pem
            echo "Key pair created"
          else
            echo "Key pair already exists"
          fi

      - name: Create S3 Buckets if needed
        run: |
          # Create S3 bucket for CodeDeploy if it doesn't exist
          if ! aws s3 ls s3://aiphoto-codedeploy-bucket >/dev/null 2>&1; then
            echo "Creating CodeDeploy S3 bucket..."
            aws s3 mb s3://aiphoto-codedeploy-bucket --region ${{ env.AWS_REGION }}
            echo "CodeDeploy S3 bucket created"
          else
            echo "CodeDeploy S3 bucket already exists"
          fi
          
          # Create S3 bucket for image storage if it doesn't exist
          if ! aws s3 ls s3://aiphoto-images-dev >/dev/null 2>&1; then
            echo "Creating images S3 bucket..."
            aws s3 mb s3://aiphoto-images-dev --region ${{ env.AWS_REGION }}
            echo "Images S3 bucket created"
          else
            echo "Images S3 bucket already exists"
          fi

      - name: Clean up failed stack if needed
        run: |
          # Check if stack exists and is in ROLLBACK_COMPLETE state
          STACK_STATUS=$(aws cloudformation describe-stacks --stack-name aiphoto-production --query 'Stacks[0].StackStatus' --output text --region ${{ env.AWS_REGION }} 2>/dev/null || echo "STACK_NOT_EXISTS")
          
          if [ "$STACK_STATUS" = "ROLLBACK_COMPLETE" ]; then
            echo "Stack is in ROLLBACK_COMPLETE state, deleting it first..."
            aws cloudformation delete-stack --stack-name aiphoto-production --region ${{ env.AWS_REGION }}
            echo "Waiting for stack deletion to complete..."
            aws cloudformation wait stack-delete-complete --stack-name aiphoto-production --region ${{ env.AWS_REGION }}
            echo "Stack deleted successfully"
          elif [ "$STACK_STATUS" != "STACK_NOT_EXISTS" ]; then
            echo "Stack exists with status: $STACK_STATUS"
          else
            echo "Stack does not exist, ready to create"
          fi

      - name: Deploy CloudFormation Stack
        run: |
          # Deploy with minimal required secrets - add more to GitHub secrets as needed
          aws cloudformation deploy \
            --template-file server/cloudformation/infrastructure.yaml \
            --stack-name aiphoto-production \
            --parameter-overrides \
              Environment=production \
              InstanceType=t3.medium \
              KeyPairName="${{ secrets.KEY_PAIR_NAME || 'aiphoto-production' }}" \
              DatabaseUrl="${{ secrets.DATABASE_URL || 'postgresql://postgres:postgres@localhost:5432/aiphoto' }}" \
              RedisUrl="${{ secrets.REDIS_URL || 'redis://localhost:6379' }}" \
              CognitoUserPoolId="${{ secrets.COGNITO_USER_POOL_ID || 'us-east-1_vT51duDCY' }}" \
              CognitoRegion="${{ secrets.COGNITO_REGION || 'us-east-1' }}" \
              GeminiApiKey="${{ secrets.GOOGLE_GEMINI_API_KEY }}" \
              S3BucketName="${{ secrets.S3_BUCKET_NAME || 'aiphoto-images-dev' }}" \
              CorsOrigin="${{ secrets.CORS_ORIGIN || 'http://localhost:3000,http://localhost:19006' }}" \
              GitHubRepo="${{ github.repository }}" \
            --capabilities CAPABILITY_NAMED_IAM \
            --region ${{ env.AWS_REGION }}

      - name: Show CloudFormation Events on Failure
        if: failure()
        run: |
          echo "CloudFormation deployment failed. Here are the stack events:"
          aws cloudformation describe-stack-events --stack-name aiphoto-production --region ${{ env.AWS_REGION }} --max-items 50 | jq -r '.StackEvents[] | select(.ResourceStatus | contains("FAILED")) | {Timestamp, LogicalResourceId, ResourceStatus, ResourceStatusReason}'

      - name: Download deployment package
        uses: actions/download-artifact@v4
        with:
          name: deployment-package

      - name: Upload to S3 and Deploy via CodeDeploy
        run: |
          # Upload deployment package to S3
          aws s3 cp deployment-package.zip s3://aiphoto-codedeploy-bucket/aiphoto-production/deployment-package-${{ github.sha }}.zip
          
          # Get deployment group info
          APP_NAME=$(aws cloudformation describe-stacks --stack-name aiphoto-production --query 'Stacks[0].Outputs[?OutputKey==`CodeDeployApplicationName`].OutputValue' --output text)
          DEPLOYMENT_GROUP=$(aws cloudformation describe-stacks --stack-name aiphoto-production --query 'Stacks[0].Outputs[?OutputKey==`CodeDeployDeploymentGroupName`].OutputValue' --output text)
          
          # Create deployment
          aws deploy create-deployment \
            --application-name $APP_NAME \
            --deployment-group-name $DEPLOYMENT_GROUP \
            --s3-location bucket=aiphoto-codedeploy-bucket,key=aiphoto-production/deployment-package-${{ github.sha }}.zip,bundleType=zip