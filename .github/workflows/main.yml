name: Build and Deploy

on:
  push:
    branches: [main]
    paths:
      - 'server/**'
      - '.github/workflows/**'
  pull_request:
    branches: [main]
    paths:
      - 'server/**'
      - '.github/workflows/**'
  workflow_dispatch:
    inputs:
      force_deploy:
        description: 'Force deployment (manual trigger)'
        required: false
        default: false
        type: boolean

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./server

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: server/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint

      - name: Run TypeScript check
        run: npm run typecheck

      - name: Build project
        run: npm run build

      - name: Run npm audit
        run: npm audit --audit-level high || true

  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    defaults:
      run:
        working-directory: ./server

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: server/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Build project
        run: npm run build

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Store secrets in AWS Parameter Store
        run: |
          aws ssm put-parameter --name "/aiphoto/prod/google-gemini-api-key" --value "${{ secrets.GOOGLE_GEMINI_API_KEY }}" --type "SecureString" --overwrite || true
          aws ssm put-parameter --name "/aiphoto/prod/sentry-dsn" --value "${{ secrets.SENTRY_DSN }}" --type "SecureString" --overwrite || true

      - name: Deploy to Production
        run: |
          npx cdk bootstrap --require-approval never || true
          npx cdk deploy --require-approval never

      - name: Test deployment
        run: |
          # Get the API endpoint from CloudFormation outputs
          API_ENDPOINT=$(aws cloudformation describe-stacks --stack-name aiphoto-prod --query 'Stacks[0].Outputs[?OutputKey==`ApiEndpoint`].OutputValue' --output text)
          echo "Testing API at: $API_ENDPOINT"
          
          # Test health endpoint
          curl -f "$API_ENDPOINT/health" || exit 1
          echo "‚úÖ Health check passed"

      - name: Notify on success
        if: success()
        run: |
          echo "üöÄ Production deployment successful!"
          API_ENDPOINT=$(aws cloudformation describe-stacks --stack-name aiphoto-prod --query 'Stacks[0].Outputs[?OutputKey==`ApiEndpoint`].OutputValue' --output text)
          echo "API Endpoint: $API_ENDPOINT"

      - name: Notify on failure
        if: failure()
        run: |
          echo "‚ùå Production deployment failed!"
          exit 1